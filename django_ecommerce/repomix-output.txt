This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
cart_service/cart_service/asgi.py
cart_service/cart_service/settings.py
cart_service/cart_service/urls.py
cart_service/cart_service/wsgi.py
cart_service/cart/admin.py
cart_service/cart/apps.py
cart_service/cart/migrations/0001_initial.py
cart_service/cart/models.py
cart_service/cart/serializers.py
cart_service/cart/templates/view_cart.html
cart_service/cart/tests.py
cart_service/cart/urls.py
cart_service/cart/views.py
cart_service/Dockerfile
cart_service/manage.py
cart_service/requirements.txt
customer_service/customer_service/asgi.py
customer_service/customer_service/settings.py
customer_service/customer_service/urls.py
customer_service/customer_service/wsgi.py
customer_service/customer/admin.py
customer_service/customer/apps.py
customer_service/customer/forms.py
customer_service/customer/migrations/0001_initial.py
customer_service/customer/models.py
customer_service/customer/serializers.py
customer_service/customer/templates/base.html
customer_service/customer/templates/login.html
customer_service/customer/templates/profile.html
customer_service/customer/templates/register.html
customer_service/customer/tests.py
customer_service/customer/urls.py
customer_service/customer/views.py
customer_service/Dockerfile
customer_service/manage.py
customer_service/requirements.txt
docker-compose.yml
ecommerce/asgi.py
ecommerce/database_router.py
ecommerce/Dockerfile
ecommerce/requirements.txt
ecommerce/settings.py
ecommerce/urls.py
ecommerce/wsgi.py
gateway_service/Dockerfile
gateway_service/gateway_service/asgi.py
gateway_service/gateway_service/settings.py
gateway_service/gateway_service/urls.py
gateway_service/gateway_service/wsgi.py
gateway_service/gateway/admin.py
gateway_service/gateway/apps.py
gateway_service/gateway/middleware.py
gateway_service/gateway/models.py
gateway_service/gateway/tests.py
gateway_service/gateway/urls.py
gateway_service/gateway/views.py
gateway_service/manage.py
gateway_service/requirements.txt
items_service/Dockerfile
items_service/items_service/asgi.py
items_service/items_service/settings.py
items_service/items_service/urls.py
items_service/items_service/wsgi.py
items_service/items/admin.py
items_service/items/apps.py
items_service/items/management/commands/seed_items.py
items_service/items/migrations/0001_initial.py
items_service/items/models.py
items_service/items/serializers.py
items_service/items/templates/home.html
items_service/items/templates/item_detail.html
items_service/items/templatetags/items_filters.py
items_service/items/tests.py
items_service/items/urls.py
items_service/items/views.py
items_service/manage.py
items_service/requirements.txt
manage.py
order_service/Dockerfile
order_service/manage.py
order_service/order_service/asgi.py
order_service/order_service/settings.py
order_service/order_service/urls.py
order_service/order_service/wsgi.py
order_service/order/admin.py
order_service/order/apps.py
order_service/order/models.py
order_service/order/serializers.py
order_service/order/tests.py
order_service/order/views.py
order_service/requirements.txt
paying_service/Dockerfile
paying_service/manage.py
paying_service/paying_service/asgi.py
paying_service/paying_service/settings.py
paying_service/paying_service/urls.py
paying_service/paying_service/wsgi.py
paying_service/paying/admin.py
paying_service/paying/apps.py
paying_service/paying/models.py
paying_service/paying/serializers.py
paying_service/paying/templates/checkout.html
paying_service/paying/templates/success.html
paying_service/paying/tests.py
paying_service/paying/urls.py
paying_service/paying/views.py
paying_service/requirements.txt
shipping_service/Dockerfile
shipping_service/manage.py
shipping_service/requirements.txt
shipping_service/shipping_service/asgi.py
shipping_service/shipping_service/settings.py
shipping_service/shipping_service/urls.py
shipping_service/shipping_service/wsgi.py
shipping_service/shipping/admin.py
shipping_service/shipping/apps.py
shipping_service/shipping/models.py
shipping_service/shipping/serializers.py
shipping_service/shipping/tests.py
shipping_service/shipping/views.py
templates/base.html

================================================================
Files
================================================================

================
File: cart_service/cart_service/asgi.py
================
"""
ASGI config for cart_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cart_service.settings')

application = get_asgi_application()

================
File: cart_service/cart_service/settings.py
================
"""
Django settings for cart_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@@khms2za-!d1un-e=icwkbsl^&5qqu#z_unr*yie#p(&b(p93'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'cart',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cart_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cart_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ecommerce_transactions',
        'USER': 'postgres',
        'PASSWORD': '2512',
        'HOST': 'db-transactions',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

================
File: cart_service/cart_service/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from cart.views import CartViewSet

router = DefaultRouter()
router.register(r'api/cart', CartViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

================
File: cart_service/cart_service/wsgi.py
================
"""
WSGI config for cart_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cart_service.settings')

application = get_wsgi_application()

================
File: cart_service/cart/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: cart_service/cart/apps.py
================
from django.apps import AppConfig


class CartConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cart'

================
File: cart_service/cart/migrations/0001_initial.py
================
# Generated by Django 3.1.12 on 2025-03-03 01:22

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_id', models.CharField(max_length=24)),
                ('quantity', models.IntegerField()),
                ('price_at_addition', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='cart.cart')),
            ],
        ),
    ]

================
File: cart_service/cart/models.py
================
from django.db import models

class Cart(models.Model):
    customer_id = models.IntegerField()  # Reference to Customer
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        app_label = 'cart'

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items')
    item_id = models.CharField(max_length=24)  # MongoDB ObjectId
    quantity = models.IntegerField()
    price_at_addition = models.DecimalField(max_digits=10, decimal_places=2)

    class Meta:
        app_label = 'cart'

================
File: cart_service/cart/serializers.py
================
from rest_framework import serializers
from .models import Cart, CartItem

class CartItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = CartItem
        fields = ['id', 'item_id', 'quantity', 'price_at_addition']

class CartSerializer(serializers.ModelSerializer):
    items = CartItemSerializer(many=True, read_only=True)

    class Meta:
        model = Cart
        fields = ['id', 'customer_id', 'created_at', 'items']

================
File: cart_service/cart/templates/view_cart.html
================
<!-- cart/templates/view_cart.html -->
{% extends 'base.html' %}
{% block content %}
    <h1>Your Cart</h1>
    <table class="table">
        <thead>
            <tr><th>Name</th><th>Quantity</th><th>Price</th></tr>
        </thead>
        <tbody>
            {% for item in cart_items %}
                <tr>
                    <td>{{ item.name }}</td>
                    <td>{{ item.quantity }}</td>
                    <td>${{ item.price }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <a href="{% url 'checkout' %}" class="btn btn-primary">Proceed to Payment</a>
{% endblock %}

================
File: cart_service/cart/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: cart_service/cart/urls.py
================
from django.urls import path
from . import views

urlpatterns = [
    path('', views.view_cart, name='view_cart'),
    path('add/<str:item_id>/', views.add_to_cart, name='add_to_cart'),
]

================
File: cart_service/cart/views.py
================
import requests
from django.shortcuts import render, redirect
from django.http import HttpResponse
from decimal import Decimal
from .models import Cart, CartItem
from rest_framework import viewsets
from .models import Cart
from .serializers import CartSerializer

def view_cart(request):
    # Get the user ID from the request headers
    user_id = request.META.get('HTTP_X_USER_ID')
    if not user_id:
        return HttpResponse("Unauthorized", status=401)
    
    # Fetch or create the user’s cart
    cart, _ = Cart.objects.get_or_create(customer_id=user_id)
    cart_items = []
    
    # Fetch details for each item in the cart via the gateway
    for cart_item in cart.items.all():
        response = requests.get(f'http://gateway:8000/gateway/items/{cart_item.item_id}/')
        if response.status_code == 200:
            item_data = response.json()
            cart_items.append({
                'name': item_data['name'],
                'quantity': cart_item.quantity,
                'price': cart_item.price_at_addition,
            })
        else:
            # Fallback in case the item service fails
            cart_items.append({
                'name': 'Unknown Item',
                'quantity': cart_item.quantity,
                'price': cart_item.price_at_addition,
            })
    
    return render(request, 'view_cart.html', {'cart_items': cart_items})

def add_to_cart(request, item_id):
    user_id = request.META.get('HTTP_X_USER_ID')
    if not user_id:
        return HttpResponse("Unauthorized", status=401)
    
    # Fetch item details from the items service via the gateway
    response = requests.get(f'http://gateway:8000/gateway/items/{item_id}/')
    if response.status_code != 200:
        return HttpResponse("Item not found", status=404)
    
    item_data = response.json()
    price = Decimal(item_data['price'])
    
    # Add or update the item in the cart
    cart, _ = Cart.objects.get_or_create(customer_id=user_id)
    cart_item, created = CartItem.objects.get_or_create(
        cart=cart,
        item_id=item_id,
        defaults={'quantity': 1, 'price_at_addition': price}
    )
    if not created:
        cart_item.quantity += 1
        cart_item.save()
    
    return redirect('view_cart')

class CartViewSet(viewsets.ModelViewSet):
    queryset = Cart.objects.all()
    serializer_class = CartSerializer

================
File: cart_service/Dockerfile
================
FROM python:3.9-slim
RUN apt-get update && apt-get install -y gcc make libpq-dev && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY . /app/
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 8002
CMD ["python", "manage.py", "runserver", "0.0.0.0:8002"]

================
File: cart_service/manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cart_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: cart_service/requirements.txt
================
django==3.1.12
djangorestframework==3.14.0
psycopg2-binary==2.9.3
requests==2.28.1

================
File: customer_service/customer_service/asgi.py
================
"""
ASGI config for customer_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'customer_service.settings')

application = get_asgi_application()

================
File: customer_service/customer_service/settings.py
================
"""
Django settings for customer_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!8h^$i(5xo*2dmuzqg_=z$4iv60_xyf+5kg@8jj4_v!zg_yd+a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',  # For token authentication
    'customer',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'customer_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'customer_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ecommerce_customers',
        'USER': 'root',
        'PASSWORD': '2512',
        'HOST': 'db-customer',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
AUTH_USER_MODEL = 'customer.Customer'

================
File: customer_service/customer_service/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from customer.views import CustomerViewSet
from django.contrib.auth import views as auth_views
from customer import views

router = DefaultRouter()
router.register(r'api/customer', CustomerViewSet)

urlpatterns = [
    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('register/', views.register, name='register'),
    path('profile/', views.profile, name='profile'),
]

================
File: customer_service/customer_service/wsgi.py
================
"""
WSGI config for customer_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'customer_service.settings')

application = get_wsgi_application()

================
File: customer_service/customer/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: customer_service/customer/apps.py
================
from django.apps import AppConfig


class CustomerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'customer'

================
File: customer_service/customer/forms.py
================
from django.contrib.auth.forms import UserCreationForm
from .models import Customer

class CustomerRegistrationForm(UserCreationForm):
    class Meta:
        model = Customer
        fields = ['username', 'email', 'password1', 'password2', 'first_name', 'last_name']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.customer_type = 'new'
        if commit:
            user.save()
        return user

================
File: customer_service/customer/migrations/0001_initial.py
================
# Generated by Django 3.1.12 on 2025-02-26 01:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('customer_type', models.CharField(choices=[('guest', 'Guest'), ('new', 'New'), ('regular', 'Regular'), ('vip', 'VIP')], default='new', max_length=10)),
                ('loyalty_points', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line1', models.CharField(max_length=255)),
                ('address_line2', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('is_default', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: customer_service/customer/models.py
================
from django.contrib.auth.models import AbstractUser
from django.db import models

class Customer(AbstractUser):
    CUSTOMER_TYPES = (
        ('guest', 'Guest'),
        ('new', 'New'),
        ('regular', 'Regular'),
        ('vip', 'VIP'),
    )
    customer_type = models.CharField(max_length=10, choices=CUSTOMER_TYPES, default='new')
    loyalty_points = models.IntegerField(default=0)

    class Meta:
        app_label = 'customer'

class Address(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name='addresses')
    address_line1 = models.CharField(max_length=255)
    address_line2 = models.CharField(max_length=255, blank=True)
    city = models.CharField(max_length=100)
    state = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=20)
    country = models.CharField(max_length=100)
    is_default = models.BooleanField(default=False)

    class Meta:
        app_label = 'customer'

================
File: customer_service/customer/serializers.py
================
from rest_framework import serializers
from .models import Customer

class CustomerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Customer
        fields = ['id', 'username', 'email', 'customer_type', 'loyalty_points']

================
File: customer_service/customer/templates/base.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>E-commerce</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Full Page Background: Black to Gray Gradient */
        body {
            background-image: linear-gradient(180deg, #253856, #253856); /* Black to Gray gradient */
            color: white; /* Set text color to white for contrast */
            font-family: Arial, sans-serif; /* Set font for better readability */
        }

        /* Navbar Background: Slight Purple to Dark Purple Gradient */
        .navbar {
            padding: 0.5rem 2rem;  /* Make the navbar bigger */
            position: sticky;    /* Make the navbar sticky */
            top: 0;              /* Stick to the top of the page */
            z-index: 1000;       /* Make sure it stays on top of other elements */
            background-image: linear-gradient(90deg, #5D84C3, #5D84C3); /* Slight Purple to Dark Purple gradient */
        }

        .navbar-nav .nav-link {
            font-size: 1.5rem; /* Increase the font size of navbar links */
            color: white !important; /* Set text color to white */
        }

        .navbar-text {
            font-size: 1.5rem; /* Increase the size of the welcome text */
            color: white !important; /* Set welcome text color to white */
            animation: twinkle 1.5s ease-in-out infinite; /* Twinkling effect animation */
        }

        /* Twinkling effect */
        @keyframes twinkle {
            0% {
                opacity: 0.8;
            }
            50% {
                opacity: 1; /* Fully visible */
            }
            100% {
                opacity: 0.8; /* Slightly faded */
            }
        }

        .navbar-nav .nav-link.active {
            font-size: 1.5rem; /* Keep the active link size the same */
        }

        /* Adjust content padding if necessary */
        main.container {
            margin-top: 60px; /* Add margin to avoid navbar covering content */
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            {% if user.is_authenticated %}
                <span class="navbar-text">Welcome, {{ user.first_name }}</span>
            {% else %}
                <a class="navbar-link" href="{% url 'login' %}">Login</a> | <a href="{% url 'register' %}">Register</a>
            {% endif %}
            <div class="collapse navbar-collapse">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link {% if request.path == '/items/' %}active{% endif %}" href="{% url 'home' %}">Home</a>
                    </li>
                    {% if user.is_authenticated %}
                        <li class="nav-item">
                            <a class="nav-link {% if request.path == '/cart/' %}active{% endif %}" href="{% url 'view_cart' %}">Cart</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {% if request.path == '/profile/' %}active{% endif %}" href="{% url 'profile' %}">Profile</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>
    <main class="container mt-4">
        {% block content %}{% endblock %}
    </main>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: customer_service/customer/templates/login.html
================
{% extends 'base.html' %}
{% block content %}
    <h2>Login</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
{% endblock %}

================
File: customer_service/customer/templates/profile.html
================
{% extends 'base.html' %}
{% block content %}
    <h1>User Profile</h1>
    <p><strong>Username:</strong> {{ user.username }}</p>
    <p><strong>Email:</strong> {{ user.email }}</p>
    <p><strong>First Name:</strong> {{ user.first_name }}</p>
    <p><strong>Last Name:</strong> {{ user.last_name }}</p>
    <p><strong>Customer Type:</strong> {{ user.customer_type }}</p>
    <p><strong>Loyalty Points:</strong> {{ user.loyalty_points }}</p>
    <!-- Add more features like order history later -->
{% endblock %}

================
File: customer_service/customer/templates/register.html
================
{% extends 'base.html' %}
{% block content %}
    <h2>Register</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Register</button>
    </form>
{% endblock %}

================
File: customer_service/customer/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: customer_service/customer/urls.py
================
from django.urls import path
from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('register/', views.register, name='register'),
    path('profile/', views.profile, name='profile'),
]

================
File: customer_service/customer/views.py
================
from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate
from rest_framework import viewsets, permissions, status
from rest_framework.response import Response
from rest_framework.decorators import action
from .forms import CustomerRegistrationForm
from .models import Customer, Address
from .serializers import CustomerSerializer

# Traditional view (keep for web interface)
def register(request):
    if request.method == 'POST':
        form = CustomerRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('home')
    else:
        form = CustomerRegistrationForm()
    return render(request, 'register.html', {'form': form})

from django.shortcuts import render, redirect

def profile(request):
    if not request.user.is_authenticated:
        return redirect('login')
    return render(request, 'profile.html', {'user': request.user})

from django.shortcuts import render
from django.contrib.auth.forms import AuthenticationForm

def login_view(request):
    form = AuthenticationForm()
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            # Perform the login action
            from django.contrib.auth import login
            user = form.get_user()
            login(request, user)
            return redirect('profile')  # Redirect to the profile page after successful login
    return render(request, 'login.html', {'form': form})


# REST API ViewSet
class CustomerViewSet(viewsets.ModelViewSet):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    @action(detail=False, methods=['post'], permission_classes=[permissions.AllowAny])
    def register(self, request):
        form = CustomerRegistrationForm(request.data)
        if form.is_valid():
            user = form.save()
            return Response({'id': user.id, 'username': user.username}, status=status.HTTP_201_CREATED)
        return Response(form.errors, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=False, methods=['post'], permission_classes=[permissions.AllowAny])
    def login(self, request):
        username = request.data.get('username')
        password = request.data.get('password')
        user = authenticate(username=username, password=password)
        if user:
            login(request, user)
            return Response({'id': user.id, 'username': user.username}, status=status.HTTP_200_OK)
        return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)

    @action(detail=False, methods=['get'])
    def profile(self, request):
        serializer = self.get_serializer(request.user)
        return Response(serializer.data)

================
File: customer_service/Dockerfile
================
FROM python:3.9-slim
RUN apt-get update && apt-get install -y gcc make libmariadb-dev && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY . /app/
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 8001
CMD ["python", "manage.py", "runserver", "0.0.0.0:8001"]

================
File: customer_service/manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'customer_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: customer_service/requirements.txt
================
django==3.1.12
djangorestframework==3.14.0
mysqlclient==2.1.0
requests==2.28.1

================
File: docker-compose.yml
================
version: '3'
services:
  db-customer:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: 2512
      MYSQL_DATABASE: ecommerce_customers
    ports:
      - "3307:3306"

  db-items:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: ecommerce_items
    ports:
      - "27017:27017"

  db-transactions:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: 2512
      POSTGRES_DB: ecommerce_transactions
    ports:
      - "5432:5432"

  customer:
    build: ./customer_service
    ports:
      - "8001:8001"
    depends_on:
      - db-customer

  items:
    build: ./items_service
    ports:
      - "8005:8005"
    depends_on:
      - db-items

  cart:
    build: ./cart_service
    ports:
      - "8002:8002"
    depends_on:
      - db-transactions

  order:
    build: ./order_service
    ports:
      - "8003:8003"
    depends_on:
      - db-transactions

  paying:
    build: ./paying_service
    ports:
      - "8004:8004"
    depends_on:
      - db-transactions

  shipping:
    build: ./shipping_service
    ports:
      - "8006:8006"
    depends_on:
      - db-transactions

  gateway:
    build: ./gateway_service
    ports:
      - "8000:8000"
    depends_on:
      - customer
      - items
      - cart
      - order
      - paying
      - shipping

================
File: ecommerce/asgi.py
================
"""
ASGI config for ecommerce project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')

application = get_asgi_application()

================
File: ecommerce/database_router.py
================
class AppDatabaseRouter:
    def db_for_read(self, model, **hints):
        if model._meta.app_label == 'customer':
            return 'default'  # Changed from 'customers'
        elif model._meta.app_label == 'items':
            return 'items'
        elif model._meta.app_label in ['cart', 'order', 'shipping', 'paying']:
            return 'transactions'
        return None

    def db_for_write(self, model, **hints):
        if model._meta.app_label == 'customer':
            return 'default'  # Changed from 'customers'
        elif model._meta.app_label == 'items':
            return 'items'
        elif model._meta.app_label in ['cart', 'order', 'shipping', 'paying']:
            return 'transactions'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        db1 = self.db_for_read(obj1.__class__)
        db2 = self.db_for_read(obj2.__class__)
        return db1 == db2

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        if app_label == 'customer':
            return db == 'default'  # Changed from 'customers'
        elif app_label == 'items':
            return db == 'items'
        elif app_label in ['cart', 'order', 'shipping', 'paying']:
            return db == 'transactions'
        else:
            return db == 'default'

================
File: ecommerce/Dockerfile
================
# Use Python base image
FROM python:3.9-slim

# Install necessary build tools and MySQL/PostgreSQL development libraries
RUN apt-get update && apt-get install -y \
    gcc \
    make \
    libpq-dev \
    libmariadb-dev \
    && rm -rf /var/lib/apt/lists/*

# Set the working directory in the container
WORKDIR /app

# Copy the requirements.txt file into the container
COPY requirements.txt /app/

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code
COPY . /app/

# Expose the port for ecommerce service
EXPOSE 8000

# Run Django development server
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

================
File: ecommerce/requirements.txt
================
# Django
django==3.1.12

# Django REST Framework for API support
djangorestframework==3.14.0

# PostgreSQL support for Django (if using PostgreSQL)
psycopg2-binary==2.9.3

# MySQL/MariaDB support for Django (if using MySQL)
mysqlclient==2.1.0

# Other dependencies (like for MongoDB, Redis, etc., if used)
# djongo==1.3.6   # Uncomment if using MongoDB
# redis==4.0.2    # Uncomment if using Redis

# Other utilities
gunicorn==20.1.0  # WSGI server for production

================
File: ecommerce/settings.py
================
"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!*ps4ta(fhli=jzd2wx^4wfw82q40xjui3vk08o9nit68k@pv1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'customer',
    'items',
    'cart',
    'order',
    'shipping',
    'paying',
    'gateway',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'items_filters': 'items.templatetags.items_filters',
            }
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ecommerce_customers',
        'USER': 'root',
        'PASSWORD': '2512',
        'HOST': 'db-customer',  # Use Docker service name
        'PORT': '3306',
    },
    'customers': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ecommerce_customers',
        'USER': 'root',
        'PASSWORD': '2512',
        'HOST': 'db-customer',  # Use Docker service name
        'PORT': '3306',
    },
    'items': {
        'ENGINE': 'djongo',
        'NAME': 'ecommerce_items',
        'CLIENT': {
            'host': 'db-items',  # Use Docker service name
            'port': 27017,
        }
    },
    'transactions': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ecommerce_transactions',
        'USER': 'postgres',
        'PASSWORD': '2512',
        'HOST': 'db-transactions',  # Use Docker service name
        'PORT': '5432',
    },
}

# Database router
DATABASE_ROUTERS = ['ecommerce.database_router.AppDatabaseRouter']


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'customer.Customer'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_DIRS = [BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Authentication settings
AUTH_USER_MODEL = 'customer.Customer'
LOGIN_REDIRECT_URL = '/profile/'
# settings.py
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']

================
File: ecommerce/urls.py
================
from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from customer.views import CustomerViewSet
from cart.views import CartViewSet
from order.views import OrderViewSet
from shipping.views import ShippingViewSet
from paying.views import PaymentViewSet
from items.views import ItemViewSet

router = DefaultRouter()
router.register(r'api/customer', CustomerViewSet, basename='customer')
router.register(r'api/cart', CartViewSet, basename='cart')
router.register(r'api/order', OrderViewSet, basename='order')
router.register(r'api/shipping', ShippingViewSet, basename='shipping')
router.register(r'api/paying', PaymentViewSet, basename='paying')
router.register(r'api/items', ItemViewSet, basename='items')

urlpatterns = [
    path('admin/', admin.site.urls),
    path('customer/', include('customer.urls')),
    path('items/', include('items.urls')),
    path('cart/', include('cart.urls')),
    path('paying/', include('paying.urls')),
    path('', include('customer.urls')),
    path('', include(router.urls)),  # Include REST API routes
]

================
File: ecommerce/wsgi.py
================
"""
WSGI config for ecommerce project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')

application = get_wsgi_application()

================
File: gateway_service/Dockerfile
================
FROM python:3.9-slim
WORKDIR /app
COPY . /app/
RUN pip install --no-cache-dir -r requirements.txt
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

================
File: gateway_service/gateway_service/asgi.py
================
"""
ASGI config for gateway_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gateway_service.settings')

application = get_asgi_application()

================
File: gateway_service/gateway_service/settings.py
================
"""
Django settings for gateway_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9dvn)5zbd+hpf)u%jrdbdmf(qi3d%7-%t3wd$15_3!_^9%dnn^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'gateway',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gateway_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gateway_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

================
File: gateway_service/gateway_service/urls.py
================
from django.urls import path
from gateway.views import GatewayView

urlpatterns = [
    path('gateway/<str:service>/', GatewayView.as_view(), name='gateway-list'),
    path('gateway/<str:service>/<int:pk>/', GatewayView.as_view(), name='gateway-detail'),
]

================
File: gateway_service/gateway_service/wsgi.py
================
"""
WSGI config for gateway_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gateway_service.settings')

application = get_wsgi_application()

================
File: gateway_service/gateway/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: gateway_service/gateway/apps.py
================
from django.apps import AppConfig


class GatewayConfig(AppConfig):
    name = 'gateway'

================
File: gateway_service/gateway/middleware.py
================
import requests
from django.http import JsonResponse

class TokenAuthenticationMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        auth_header = request.headers.get('Authorization')
        if auth_header and auth_header.startswith('Token '):
            token_key = auth_header.split(' ')[1]
            # Validate token with the customer service
            response = requests.post('http://customer:8001/api/validate_token/', data={'token': token_key})
            if response.status_code == 200:
                user_id = response.json()['user_id']
                request.META['HTTP_X_USER_ID'] = str(user_id)
            else:
                return JsonResponse({'error': 'Invalid token'}, status=401)
        response = self.get_response(request)
        return response

================
File: gateway_service/gateway/models.py
================
from django.db import models

# Create your models here.

================
File: gateway_service/gateway/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: gateway_service/gateway/urls.py
================
from django.urls import path
from rest_framework.routers import DefaultRouter
from .views import GatewayViewSet

router = DefaultRouter()
router.register(r'gateway/(?P<service>[^/.]+)', GatewayViewSet, basename='gateway')

urlpatterns = router.urls

================
File: gateway_service/gateway/views.py
================
import requests
from rest_framework.views import APIView
from rest_framework.response import Response
from django.http import HttpResponse

class GatewayView(APIView):
    # Dictionary mapping service names to their internal URLs
    service_urls = {
        'customers': 'http://customer:8001/api/customer/',
        'items': 'http://items:8005/api/items/',
        'cart': 'http://cart:8002/api/cart/',
        'orders': 'http://order:8003/api/order/',
        'payments': 'http://paying:8004/api/paying/',
        'shipping': 'http://shipping:8006/api/shipping/',
    }

    def get(self, request, service, pk=None):
        if service not in self.service_urls:
            return Response({"error": "Service not found"}, status=404)
        
        url = f"{self.service_urls[service]}{pk}/" if pk else self.service_urls[service]
        headers = {'X-User-ID': request.META.get('HTTP_X_USER_ID', '')}
        response = requests.get(url, headers=headers)
        
        # Debugging output
        print(f"Request URL: {url}")
        print(f"Status Code: {response.status_code}")
        print(f"Response Content: {response.text}")
        
        try:
            return Response(response.json(), status=response.status_code)
        except ValueError:
            return Response(
                {"error": "Invalid JSON response", "content": response.text},
                status=500
            )

    def post(self, request, service):
        if service not in self.service_urls:
            return Response({"error": "Service not found"}, status=404)
        
        headers = {'X-User-ID': request.META.get('HTTP_X_USER_ID', '')}
        response = requests.post(self.service_urls[service], json=request.data, headers=headers)
        return Response(response.json(), status=response.status_code)

    # Add similar methods for PUT, DELETE, etc., as needed
    def put(self, request, service, pk):
        if service not in self.service_urls:
            return Response({"error": "Service not found"}, status=404)
        
        url = f"{self.service_urls[service]}{pk}/"
        headers = {'X-User-ID': request.META.get('HTTP_X_USER_ID', '')}
        response = requests.put(url, json=request.data, headers=headers)
        return Response(response.json(), status=response.status_code)

    def delete(self, request, service, pk):
        if service not in self.service_urls:
            return Response({"error": "Service not found"}, status=404)
        
        url = f"{self.service_urls[service]}{pk}/"
        headers = {'X-User-ID': request.META.get('HTTP_X_USER_ID', '')}
        response = requests.delete(url, headers=headers)
        return Response(response.status_code, status=response.status_code)

================
File: gateway_service/manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gateway_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: gateway_service/requirements.txt
================
django==3.1.12
djangorestframework==3.14.0
requests==2.28.1

================
File: items_service/Dockerfile
================
FROM python:3.9-slim
RUN apt-get update && apt-get install -y gcc make && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY . /app/
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 8005
CMD ["python", "manage.py", "runserver", "0.0.0.0:8005"]

================
File: items_service/items_service/asgi.py
================
"""
ASGI config for items_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'items_service.settings')

application = get_asgi_application()

================
File: items_service/items_service/settings.py
================
"""
Django settings for items_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!++y@f2-hou3-&j@kl7al-cp@1=io-1ud#d@&4zh@)+$5!dfyk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'items',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'items_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'items_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'ecommerce_items',
        'CLIENT': {
            'host': 'db-items',
            'port': 27017,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

================
File: items_service/items_service/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from items.views import ItemViewSet

router = DefaultRouter()
router.register(r'api/items', ItemViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

================
File: items_service/items_service/wsgi.py
================
"""
WSGI config for items_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'items_service.settings')

application = get_wsgi_application()

================
File: items_service/items/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: items_service/items/apps.py
================
from django.apps import AppConfig


class ItemsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'items'

================
File: items_service/items/management/commands/seed_items.py
================
from django.core.management.base import BaseCommand
from items.models import Item
import random

class Command(BaseCommand):
    help = 'Seed items data'

    def handle(self, *args, **kwargs):
        items = [
            {"name": "Shirt", "category": "clothes"},
            {"name": "Book", "category": "book"},
            {"name": "Laptop", "category": "electronics"},
            {"name": "Shoes", "category": "footwear"},
            {"name": "Watch", "category": "accessories"},
            {"name": "Bag", "category": "accessories"},
            {"name": "Tablet", "category": "electronics"},
            {"name": "Jacket", "category": "clothes"},
            {"name": "Headphones", "category": "electronics"}
        ]

        for item in items:
            Item.objects.create(
                name=item["name"],
                category=item["category"],
                description=f"High-quality {item['name']}.",
                price=round(random.uniform(10, 500), 2),
                stock_quantity=random.randint(1, 100),
                image_url=f"/static/images/{item['name'].lower()}.jpg",  # Replace with actual images in static folder
                specific_data={}
            )

        self.stdout.write(self.style.SUCCESS(f'Seeded {len(items)} items'))

================
File: items_service/items/migrations/0001_initial.py
================
# Generated by Django 3.1.12 on 2025-02-26 01:43

from django.db import migrations, models
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('category', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('stock_quantity', models.IntegerField()),
                ('image_url', models.URLField()),
                ('specific_data', djongo.models.fields.JSONField()),
            ],
        ),
    ]

================
File: items_service/items/models.py
================
from djongo import models

class Item(models.Model):
    _id = models.ObjectIdField()
    name = models.CharField(max_length=255)
    category = models.CharField(max_length=50)  # book, mobile, clothes, shoes
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    stock_quantity = models.IntegerField()
    image_url = models.URLField()
    specific_data = models.JSONField()  # e.g., {"author": "X"} for books

    class Meta:
        app_label = 'items'

================
File: items_service/items/serializers.py
================
from rest_framework import serializers
from .models import Item

class ItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = Item
        fields = ['_id', 'name', 'category', 'description', 'price', 'stock_quantity', 'image_url', 'specific_data']

================
File: items_service/items/templates/home.html
================
{% extends 'base.html' %}
{% load items_filters %}
{% block content %}
    <!-- <h1>HOT DEALS</h1> -->
    <div class="container">
        <div class="row row-cols-1 row-cols-md-3 g-4">
            {% for item in items %}
                <div class="col">
                    <div class="card h-100" style="border-radius: 15px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);"> <!-- Curved and shadow effect -->
                        <!-- Set fixed square size for the image -->
                        <img src="{{ item.image_url }}" class="card-img-top" alt="{{ item.name }}" style="object-fit: cover; width: 100%; height: 200px; border-radius: 15px 15px 0 0;"> <!-- Curved top corners -->
                        <div class="card-body" style="background: linear-gradient(45deg, #86BCE8 30%, #5D84C3 90%); border-radius: 0 0 15px 15px;"> <!-- Purple-blue to purple gradient with curved bottom -->
                            <h5 class="card-title">{{ item.name }}</h5>
                            <p class="card-text">{{ item.description }}</p>
                            <a href="{% url 'item_detail' item|get_id %}" class="btn btn-primary">View Details</a>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
{% endblock %}

================
File: items_service/items/templates/item_detail.html
================
{% extends 'base.html' %}
{% load items_filters %}
{% block content %}
    <h1>{{ item.name }}</h1>
    <p><strong>Type:</strong> {{ item.category }}</p>
    <p><strong>Description:</strong> {{ item.description }}</p>
    <p><strong>Price:</strong> ${{ item.price }}</p>
    <a href="{% url 'add_to_cart' item|get_id %}" class="btn btn-success">Add to Cart</a>
    <a href="{% url 'home' %}" class="btn btn-secondary">Back to Home</a>
{% endblock %}

================
File: items_service/items/templatetags/items_filters.py
================
from django import template

register = template.Library()

@register.filter
def get_id(item):
    return str(item._id)  # Convert _id to a string for URL compatibility

================
File: items_service/items/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: items_service/items/urls.py
================
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('item/<str:id>/', views.item_detail, name='item_detail'),
]

================
File: items_service/items/views.py
================
from django.shortcuts import render
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticatedOrReadOnly
from .models import Item
from .serializers import ItemSerializer
from bson import ObjectId 
from rest_framework.exceptions import NotFound

# Traditional views
def home(request):
    items = Item.objects.all()[:10]
    return render(request, 'home.html', {'items': items})

def item_detail(request, id):
    item = Item.objects.get(_id=ObjectId(id))
    return render(request, 'item_detail.html', {'item': item})

# REST API ViewSet
class ItemViewSet(viewsets.ModelViewSet):
    queryset = Item.objects.all()
    serializer_class = ItemSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    def get_object(self):
        pk = self.kwargs.get('pk')  # Get the ID from the URL
        try:
            # Convert the string ID to ObjectId and query the item
            obj = Item.objects.get(_id=ObjectId(pk))
        except Item.DoesNotExist:
            raise NotFound(detail="Item not found")
        self.check_object_permissions(self.request, obj)
        return obj

================
File: items_service/manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'items_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: items_service/requirements.txt
================
django==3.1.12
djangorestframework==3.14.0
djongo==1.3.6
requests==2.28.1

================
File: manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: order_service/Dockerfile
================
FROM python:3.9-slim
RUN apt-get update && apt-get install -y gcc make libpq-dev && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY . /app/
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 8003
CMD ["python", "manage.py", "runserver", "0.0.0.0:8003"]

================
File: order_service/manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'order_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: order_service/order_service/asgi.py
================
"""
ASGI config for order_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'order_service.settings')

application = get_asgi_application()

================
File: order_service/order_service/settings.py
================
"""
Django settings for order_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'o*spedr@cg3-g(cnser4_9o-j-&qk_*g!ffnlb%3h%i1p6-p7u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'order',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'order_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'order_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ecommerce_transactions',
        'USER': 'postgres',
        'PASSWORD': '2512',
        'HOST': 'db-transactions',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

================
File: order_service/order_service/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from order.views import OrderViewSet

router = DefaultRouter()
router.register(r'api/order', OrderViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

================
File: order_service/order_service/wsgi.py
================
"""
WSGI config for order_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'order_service.settings')

application = get_wsgi_application()

================
File: order_service/order/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: order_service/order/apps.py
================
from django.apps import AppConfig


class OrderConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'order'

================
File: order_service/order/models.py
================
from django.db import models

class Order(models.Model):
    customer_id = models.IntegerField()
    order_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, default='pending')
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    shipping_address = models.JSONField()  # Snapshot of address

    class Meta:
        app_label = 'order'

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    item_id = models.CharField(max_length=24)
    quantity = models.IntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)

    class Meta:
        app_label = 'order'

================
File: order_service/order/serializers.py
================
from rest_framework import serializers
from .models import Order, OrderItem

class OrderItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = OrderItem
        fields = ['id', 'item_id', 'quantity', 'price']

class OrderSerializer(serializers.ModelSerializer):
    items = OrderItemSerializer(many=True, read_only=True)

    class Meta:
        model = Order
        fields = ['id', 'customer_id', 'order_date', 'status', 'total_price', 'shipping_address', 'items']

================
File: order_service/order/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: order_service/order/views.py
================
# order/views.py
from rest_framework import viewsets, status
from rest_framework.permissions import IsAuthenticated
from .models import Order, OrderItem
from .serializers import OrderSerializer
from rest_framework.response import Response

class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Order.objects.filter(customer_id=self.request.user.id)

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        order = serializer.save()
        items_data = request.data.get('items', [])
        for item_data in items_data:
            OrderItem.objects.create(
                order=order,
                item_id=item_data['item_id'],
                quantity=item_data['quantity'],
                price=item_data['price']
            )
        serializer = self.get_serializer(order)  # Refresh serializer to include items
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)
    
    
class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer

================
File: order_service/requirements.txt
================
django==3.1.12
djangorestframework==3.14.0
psycopg2-binary==2.9.3
requests==2.28.1

================
File: paying_service/Dockerfile
================
FROM python:3.9-slim
RUN apt-get update && apt-get install -y gcc make libpq-dev && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY . /app/
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 8004
CMD ["python", "manage.py", "runserver", "0.0.0.0:8004"]

================
File: paying_service/manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'paying_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: paying_service/paying_service/asgi.py
================
"""
ASGI config for paying_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'paying_service.settings')

application = get_asgi_application()

================
File: paying_service/paying_service/settings.py
================
"""
Django settings for paying_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'zjmyb6c1-3qx-tb_6aqdf$mj@09p6^h_-2bixw0#ybqe75bcb0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'paying',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'paying_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'paying_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ecommerce_transactions',
        'USER': 'postgres',
        'PASSWORD': '2512',
        'HOST': 'db-transactions',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

================
File: paying_service/paying_service/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from paying.views import PaymentViewSet

router = DefaultRouter()
router.register(r'api/paying', PaymentViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

================
File: paying_service/paying_service/wsgi.py
================
"""
WSGI config for paying_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'paying_service.settings')

application = get_wsgi_application()

================
File: paying_service/paying/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: paying_service/paying/apps.py
================
from django.apps import AppConfig


class PayingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'paying'

================
File: paying_service/paying/models.py
================
from django.db import models

class Payment(models.Model):
    order_id = models.IntegerField()  # Changed from ForeignKey to IntegerField    payment_method = models.CharField(max_length=50)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, default='pending')
    paid_at = models.DateTimeField(null=True)

    class Meta:
        app_label = 'paying'

================
File: paying_service/paying/serializers.py
================
from rest_framework import serializers
from .models import Payment

class PaymentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Payment
        fields = ['id', 'order_id', 'payment_method', 'amount', 'status', 'paid_at']

================
File: paying_service/paying/templates/checkout.html
================
{% extends 'base.html' %}
{% block content %}
    <h1>Checkout</h1>
    <p>Total Price: ${{ total_price }}</p>
    <form method="post">
        {% csrf_token %}
        <div class="mb-3">
            <label>Shipping Method</label>
            <select name="shipping_method" class="form-select">
                <option value="standard">Standard ($5)</option>
            </select>
        </div>
        <div class="mb-3">
            <label>Payment Method</label>
            <select name="payment_method" class="form-select">
                <option value="credit_card">Credit Card</option>
            </select>
        </div>
        <button type="submit" class="btn btn-success">Pay Now</button>
    </form>
{% endblock %}

================
File: paying_service/paying/templates/success.html
================
{% extends 'base.html' %}
{% block content %}
    <h1>Payment Successful!</h1>
    <p>Thank you for your purchase.</p>
    <a href="{% url 'home' %}" class="btn btn-primary">Back to Home</a>
{% endblock %}

================
File: paying_service/paying/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: paying_service/paying/urls.py
================
from django.urls import path
from . import views

urlpatterns = [
    path('checkout/', views.checkout, name='checkout'),
    path('success/', views.success, name='success'),
]

================
File: paying_service/paying/views.py
================
import requests
from django.shortcuts import render, redirect
from django.http import HttpResponse
from .models import Payment
from django.utils import timezone
from rest_framework import viewsets
from .serializers import PaymentSerializer

def checkout(request):
    user_id = request.META.get('HTTP_X_USER_ID')
    if not user_id:
        return HttpResponse("Unauthorized", status=401)
    
    # Fetch cart data via the gateway
    cart_response = requests.get(f'http://gateway:8000/gateway/cart/', headers={'X-User-ID': user_id})
    if cart_response.status_code != 200:
        return HttpResponse("Cart not found", status=404)
    
    cart_data = cart_response.json()[0]  # Assuming one cart per user
    total_price = sum(float(item['price_at_addition']) * item['quantity'] for item in cart_data['items'])
    
    if request.method == 'POST':
        # Create an order via the gateway
        order_data = {
            'customer_id': user_id,
            'total_price': str(total_price),
            'shipping_address': {'address': 'Sample Address'},
            'items': [
                {'item_id': item['item_id'], 'quantity': item['quantity'], 'price': str(item['price_at_addition'])}
                for item in cart_data['items']
            ]
        }
        order_response = requests.post(
            'http://gateway:8000/gateway/orders/',
            json=order_data,
            headers={'X-User-ID': user_id}
        )
        if order_response.status_code != 201:
            return HttpResponse("Failed to create order", status=400)
        
        order_id = order_response.json()['id']
        
        # Create shipping record via the gateway
        shipping_data = {
            'order': order_id,
            'shipping_method': 'standard',
            'shipping_cost': '5.00'
        }
        requests.post(
            'http://gateway:8000/gateway/shipping/',
            json=shipping_data,
            headers={'X-User-ID': user_id}
        )
        
        # Create payment record
        Payment.objects.create(
            order_id=order_id,
            payment_method='credit_card',
            amount=total_price,
            status='completed',
            paid_at=timezone.now()
        )
        
        # Clear the cart via the gateway
        requests.delete(f'http://gateway:8000/gateway/cart/', headers={'X-User-ID': user_id})
        return redirect('success')
    
    return render(request, 'checkout.html', {'total_price': total_price})


class PaymentViewSet(viewsets.ModelViewSet):
    queryset = Payment.objects.all()
    serializer_class = PaymentSerializer

================
File: paying_service/requirements.txt
================
django==3.1.12
djangorestframework==3.14.0
psycopg2-binary==2.9.3
requests==2.28.1

================
File: shipping_service/Dockerfile
================
FROM python:3.9-slim
RUN apt-get update && apt-get install -y gcc make libpq-dev && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY . /app/
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 8006
CMD ["python", "manage.py", "runserver", "0.0.0.0:8006"]

================
File: shipping_service/manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shipping_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: shipping_service/requirements.txt
================
django==3.1.12
djangorestframework==3.14.0
psycopg2-binary==2.9.3
requests==2.28.1

================
File: shipping_service/shipping_service/asgi.py
================
"""
ASGI config for shipping_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shipping_service.settings')

application = get_asgi_application()

================
File: shipping_service/shipping_service/settings.py
================
"""
Django settings for shipping_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '22i(9tr&a%*+)w*oojqsbh6iqax&f=(!m+ar@@a%qnit(an&6@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shipping',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'shipping_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shipping_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ecommerce_transactions',
        'USER': 'postgres',
        'PASSWORD': '2512',
        'HOST': 'db-transactions',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

================
File: shipping_service/shipping_service/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from shipping.views import ShippingViewSet

router = DefaultRouter()
router.register(r'api/shipping', ShippingViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

================
File: shipping_service/shipping_service/wsgi.py
================
"""
WSGI config for shipping_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shipping_service.settings')

application = get_wsgi_application()

================
File: shipping_service/shipping/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: shipping_service/shipping/apps.py
================
from django.apps import AppConfig


class ShippingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'shipping'

================
File: shipping_service/shipping/models.py
================
from django.db import models

class Shipping(models.Model):
    order_id = models.IntegerField()  # Changed from ForeignKey to IntegerField    shipping_method = models.CharField(max_length=50)
    shipping_cost = models.DecimalField(max_digits=10, decimal_places=2)
    tracking_number = models.CharField(max_length=100, blank=True)

    class Meta:
        app_label = 'shipping'

================
File: shipping_service/shipping/serializers.py
================
from rest_framework import serializers
from .models import Shipping

class ShippingSerializer(serializers.ModelSerializer):
    class Meta:
        model = Shipping
        fields = ['id', 'order_id', 'shipping_method', 'shipping_cost', 'tracking_number']

================
File: shipping_service/shipping/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: shipping_service/shipping/views.py
================
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from .models import Shipping
from .serializers import ShippingSerializer

class ShippingViewSet(viewsets.ModelViewSet):
    queryset = Shipping.objects.all()
    serializer_class = ShippingSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Shipping.objects.filter(order__customer_id=self.request.user.id)

================
File: templates/base.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>E-commerce</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Full Page Background: Black to Gray Gradient */
        body {
            background-image: linear-gradient(180deg, #253856, #253856); /* Black to Gray gradient */
            color: white; /* Set text color to white for contrast */
            font-family: Arial, sans-serif; /* Set font for better readability */
        }

        /* Navbar Background: Slight Purple to Dark Purple Gradient */
        .navbar {
            padding: 0.5rem 2rem;  /* Make the navbar bigger */
            position: sticky;    /* Make the navbar sticky */
            top: 0;              /* Stick to the top of the page */
            z-index: 1000;       /* Make sure it stays on top of other elements */
            background-image: linear-gradient(90deg, #5D84C3, #5D84C3); /* Slight Purple to Dark Purple gradient */
        }

        .navbar-nav .nav-link {
            font-size: 1.5rem; /* Increase the font size of navbar links */
            color: white !important; /* Set text color to white */
        }

        .navbar-text {
            font-size: 1.5rem; /* Increase the size of the welcome text */
            color: white !important; /* Set welcome text color to white */
            animation: twinkle 1.5s ease-in-out infinite; /* Twinkling effect animation */
        }

        /* Twinkling effect */
        @keyframes twinkle {
            0% {
                opacity: 0.8;
            }
            50% {
                opacity: 1; /* Fully visible */
            }
            100% {
                opacity: 0.8; /* Slightly faded */
            }
        }

        .navbar-nav .nav-link.active {
            font-size: 1.5rem; /* Keep the active link size the same */
        }

        /* Adjust content padding if necessary */
        main.container {
            margin-top: 60px; /* Add margin to avoid navbar covering content */
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            {% if user.is_authenticated %}
                <span class="navbar-text">Welcome, {{ user.first_name }}</span>
            {% else %}
                <a class="navbar-link" href="{% url 'login' %}">Login</a> | <a href="{% url 'register' %}">Register</a>
            {% endif %}
            <div class="collapse navbar-collapse">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link {% if request.path == '/items/' %}active{% endif %}" href="{% url 'home' %}">Home</a>
                    </li>
                    {% if user.is_authenticated %}
                        <li class="nav-item">
                            <a class="nav-link {% if request.path == '/cart/' %}active{% endif %}" href="{% url 'view_cart' %}">Cart</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {% if request.path == '/profile/' %}active{% endif %}" href="{% url 'profile' %}">Profile</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>
    <main class="container mt-4">
        {% block content %}{% endblock %}
    </main>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>



================================================================
End of Codebase
================================================================
